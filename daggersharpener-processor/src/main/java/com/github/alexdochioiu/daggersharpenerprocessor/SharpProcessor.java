/*
 * Copyright 2018 Alexandru Iustin Dochioiu
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.github.alexdochioiu.daggersharpenerprocessor;

import com.github.alexdochioiu.daggersharpenerprocessor.models.SharpComponentModel;
import com.github.alexdochioiu.daggersharpenerprocessor.utils.SharpComponentUtils;
import com.github.alexdochioiu.daggersharpenerprocessor.utils.dagger2.AnnotationUtils;
import com.github.alexdochioiu.daggersharpenerprocessor.utils.dagger2.ScopeUtils;
import com.squareup.javapoet.JavaFile;
import com.squareup.javapoet.MethodSpec;
import com.squareup.javapoet.ParameterSpec;
import com.squareup.javapoet.TypeSpec;

import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.Set;

import javax.annotation.processing.AbstractProcessor;
import javax.annotation.processing.ProcessingEnvironment;
import javax.annotation.processing.RoundEnvironment;
import javax.annotation.processing.SupportedAnnotationTypes;
import javax.annotation.processing.SupportedSourceVersion;
import javax.lang.model.SourceVersion;
import javax.lang.model.element.Element;
import javax.lang.model.element.ElementKind;
import javax.lang.model.element.Modifier;
import javax.lang.model.element.TypeElement;

/**
 * Created by Alexandru Iustin Dochioiu on 7/26/2018
 */
@SupportedAnnotationTypes({
        "com.github.alexdochioiu.daggersharpener.SharpComponent",
        "com.github.alexdochioiu.daggersharpener.SharpScope",
        "com.github.alexdochioiu.daggersharpener.SharpInject",
        "com.github.alexdochioiu.daggersharpener.SharpProvides"
})
@SupportedSourceVersion(SourceVersion.RELEASE_7)
public class SharpProcessor extends AbstractProcessor {

    private ProcessingEnvironment processingEnvironment;
    private boolean initFinishedSuccessfully = true;

    @Override
    public synchronized void init(ProcessingEnvironment processingEnvironment) {
        super.init(processingEnvironment);

        this.processingEnvironment = processingEnvironment;
        MessagerWrapper.initInstance(processingEnvironment.getMessager());

        initFinishedSuccessfully &= AnnotationUtils.init(processingEnvironment);
        initFinishedSuccessfully &= ScopeUtils.init(processingEnvironment);
    }

    @Override
    public boolean process(Set<? extends TypeElement> set, RoundEnvironment roundEnvironment) {
        if (!initFinishedSuccessfully) {
            return false;
        }

        for (SharpComponentModel model : getComponents(roundEnvironment)) {
            createDaggerComponent(model);
        }

        return true;
    }

    private void createDaggerComponent(SharpComponentModel model) {
        TypeSpec.Builder generatedComponentBuilder = TypeSpec.interfaceBuilder(model.componentName)
                .addAnnotation(AnnotationUtils.getDaggerComponentAnnotation())
                .addModifiers(Modifier.PUBLIC);

        ParameterSpec param = ParameterSpec.builder(model.injectedClass, "thisClass").build();


        generatedComponentBuilder.addMethod(
                MethodSpec.methodBuilder("inject")
                        .returns(model.injectedClass)
                        .addModifiers(Modifier.ABSTRACT, Modifier.PUBLIC)
                        .addParameter(param)
                        .build()
        );

        try {
            JavaFile.builder(model.packageString, generatedComponentBuilder.build())
                    .addFileComment("Generated by DaggerSharpener")
                    .build()
                    .writeTo(processingEnvironment.getFiler());
        } catch (IOException e) {
            e.printStackTrace();
            MessagerWrapper.logError(String.format("Could not generate component '%s'", model.componentName));
        }
    }

    private List<SharpComponentModel> getComponents(RoundEnvironment roundEnvironment) {
        final List<SharpComponentModel> componentModels = new ArrayList<>(); //TODO consider switching to linked list

        final TypeElement sharpComponentType = processingEnv
                .getElementUtils()
                .getTypeElement("com.github.alexdochioiu.daggersharpener.SharpComponent");

        // get all the classes annotated as SharpComponent
        final Set<? extends Element> sharpClasses = roundEnvironment.getElementsAnnotatedWith(sharpComponentType);

        // if there's no classes annotated, return our empty list
        if (sharpClasses == null || sharpClasses.isEmpty()) {
            return componentModels;
        }

        for (final Element element : sharpClasses) {
            if (element.getKind() != ElementKind.CLASS) {
                MessagerWrapper.logError("SharpComponent annotation applies only to classes! Cannot be used with '%s'", element.getSimpleName());
                return componentModels;
            }

            final SharpComponentModel model = SharpComponentUtils.getSharpComponentModel(element, processingEnvironment);

            componentModels.add(model);
        }

        return componentModels;
    }
}
