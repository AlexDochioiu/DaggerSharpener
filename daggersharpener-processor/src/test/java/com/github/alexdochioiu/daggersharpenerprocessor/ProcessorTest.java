/*
 * Copyright 2019 Alexandru Iustin Dochioiu
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.github.alexdochioiu.daggersharpenerprocessor;

import com.google.common.base.Joiner;
import com.google.common.truth.Truth;
import com.google.testing.compile.JavaFileObjects;
import com.google.testing.compile.JavaSourcesSubjectFactory;

import org.junit.Assert;
import org.junit.Test;

import java.io.File;
import java.net.MalformedURLException;
import java.util.LinkedList;
import java.util.List;
import java.util.Objects;

import javax.tools.JavaFileObject;

/**
 * Created by Alexandru Iustin Dochioiu on 7/29/2018
 */
public class ProcessorTest {

    private static final String NEW_LINE = "\n";

    /**
     * Empty class with no methods should generate an empty interface
     */
    @Test
    public void simpleClassWithNoMethods() throws MalformedURLException {
        File appFile = new File("test1res/Application.java");
        final JavaFileObject in = JavaFileObjects.forResource(appFile.toURI().toURL());

        final JavaFileObject output = JavaFileObjects.forSourceString(
                "com.example.IISimpleClass",
                Joiner.on(NEW_LINE).join(
                        "// Generated by TeaTime",
                        "package com.example;",
                        "",
                        "public interface IISimpleClass {",
                        "}"
                )
        );

        List<JavaFileObject> inFiles = dirToObjectFiles("test1/in");

        Truth.assert_()
                .about(JavaSourcesSubjectFactory.javaSources())
                .that(inFiles)
                .processedWith(new SharpProcessor())
                .compilesWithoutError();
                //.and()
                //.generatesSources(output);
    }

    private List<JavaFileObject> pathToJavaFiles(String[] args) throws MalformedURLException {
        final List<JavaFileObject> fileObjects = new LinkedList<>();
        for (final String filePath : args) {
            fileObjects.add(JavaFileObjects.forResource(new File(filePath).toURI().toURL()));
        }

        return fileObjects;
    }

    private List<JavaFileObject> dirToObjectFiles(final String dirPath) throws MalformedURLException {
        final List<JavaFileObject> fileObjects = new LinkedList<>();
        final File dir = new File(getClass().getClassLoader().getResource(dirPath).getFile());
        if (dir.isDirectory()) {
            for (final File file : Objects.requireNonNull(dir.listFiles())) {
                fileObjects.add(JavaFileObjects.forResource(file.toURI().toURL()));
            }
        } else {
            Assert.fail("dirToObjectFiles: path is not a directory");
        }
        return fileObjects;
    }
}
